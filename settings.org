#+TITLE Emacs Init v3.1
* Straight Use Package

#+begin_src emacs-lisp
;; Use straight.el for use-package expressions
(straight-use-package 'use-package)
#+end_src
* Path from shell
Makes sure that emacs has the same path as your shell.
#+begin_src emacs-lisp
(straight-use-package 'exec-path-from-shell)
(exec-path-from-shell-initialize)
#+end_src


** Font
#+begin_src emacs-lisp

(set-face-attribute 'default nil
                  :font "DejaVu Sans Mono 14")

#+end_src

#+RESULTS:

** Melpa and Misc

#+BEGIN_SRC emacs-lisp 
(require 'misc)
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+END_SRC
* Desktop Save
#+BEGIN_SRC emacs-lisp
(desktop-save-mode 0)
#+END_SRC

* Completion
** Vertico Orderless Marginalia
Vertico for vertical completion.
Orderless for better regex searches.
Marginalia for discoverability.
#+begin_src emacs-lisp
    (use-package vertico
      :straight t
      :init
      (vertico-mode))

      ;; Save history for all completion buffers
      (use-package savehist
	:straight t
	:init
	(savehist-mode))

(define-key vertico-map "\M-q" #'vertico-quick-insert)
(define-key vertico-map "\C-q" #'vertico-quick-exit)
 (use-package marginalia
   :after vertico
   :straight t
   :custom
   (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
   :init
   (marginalia-mode))
   (use-package orderless
      :straight t
      :custom (completion-styles '(orderless)))
#+end_src
** Consult

Consult make all this stuff below better. 
#+begin_src emacs-lisp
(use-package consult
  :straight t
  
  :bind (
("C-c h" . consult-history)
("C-c m" . consult-mode-command)
("C-c k" . consult-kmacro)
("C-x M-:" . consult-complex-command)
("C-x b" . consult-buffer)
("C-x 4 b" . consult-buffer-other-window)
("C-x 5 b" . consult-buffer-other-frame)
("C-x r b" . consult-bookmark)
("C-x p b" . consult-project-buffer)
("M-#" . consult-register-load)
("M-'" . consult-register-store)
("C-M-#" . consult-register)
("M-y" . consult-yank-pop)
("<help> a" . consult-apropos)
("M-g e" . consult-compile-error)
("M-g f" . consult-flycheck)
("M-g g" . consult-goto-line)
("M-g M-g" . consult-goto-line)
("M-g o" . consult-outline)
("M-g m" . consult-mark)
("M-g k" . consult-global-mark)
("M-g i" . consult-imenu)
("M-g I" . consult-imenu-multi)
("M-s d" . consult-find)
("M-s D" . consult-locate)
("M-s g" . consult-grep)
("M-s G" . consult-git-grep)
("M-s r" . consult-ripgrep)
("M-s l" . consult-line)
("M-s L" . consult-line-multi)
("M-s m" . consult-multi-occur)
("M-s k" . consult-keep-lines)
("M-s u" . consult-focus-lines)
("M-s e" . consult-isearch-history)
("M-e" . consult-isearch-history)
("M-s e" . consult-isearch-history)
("M-s l" . consult-line)
("M-s L" . consult-line-multi)
("M-s" . consult-history)
("M-r" . consult-history))
:hook (completion-list-mode . consult-preview-at-point-mode)
:init
(setq register-preview-delay 0.5
	register-preview-function #'consult-register-format)
(advice-add #'register-preview :override #'consult-register-window)
(setq xref-show-xrefs-function #'consult-xref
	xref-show-definitions-function #'consult-xref)
:config
 (setq consult-narrow-key "<") ;; (kbd "C-+")
(autoload 'projectile-project-root "projectile")
(setq consult-project-function (lambda (_) (projectile-project-root)))
)
(setq completion-in-region-function
      (lambda (&rest args)
	(apply (if vertico-mode
		   #'consult-completion-in-region
		 #'completion--in-region)
	       args)))
#+end_src

* Languages
** Rust
#+begin_src emacs-lisp
  (use-package rustic
    :straight t
    :config
    (setq rustic-format-on-save t))
#+end_src

** C#

#+BEGIN_SRC emacs-lisp
;; I guess csharp mode is built in now?
;;(straight-use-package 'csharp-mode)
#+END_SRC

** Typescript

#+begin_src emacs-lisp
(straight-use-package 'rjsx-mode)
(straight-use-package 'typescript-mode)

(setq js-indent-level 2)
(setq typescript-indent-level 2)


(use-package tide :straight t)
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode +1))

  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)

  ;; formats the buffer before saving
  (add-hook 'before-save-hook 'tide-format-before-save)

  (add-hook 'typescript-mode-hook #'setup-tide-mode)
#+end_src



** Go
#+BEGIN_SRC emacs-lisp
(straight-use-package 'go-mode)
   (add-to-list 'auto-mode-alist '("\\.go?\\'" . go-mode))
#+END_SRC

** Dockerfiles

#+BEGIN_SRC emacs-lisp
(straight-use-package 'dockerfile-mode)

#+END_SRC

* Annoyances
** Deletion Mode
This option sets what happens when you highlight text and then start typing. By default, for some reason, the answer is nothing - you just start typing and the marked text just stays there and you feel like a dumb ass.

Setting this to a non-nil value makes it work like literally every other program (all of which emacs predates, to be fair).
#+begin_src emacs-lisp

(delete-selection-mode 1)
#+end_src

** The audible bell must be turned off
#+begin_src emacs-lisp
  (setq visible-bell 1)
#+end_src
** Backups are an annoying but necessary evil that must be managed

#+BEGIN_SRC emacs-lisp
;; No lock files, because two users will never work on same file
(setq create-lockfiles nil)

(defvar --backup-directory (concat user-emacs-directory "backups"))
(if (not (file-exists-p --backup-directory))
        (make-directory --backup-directory t))
(setq backup-directory-alist `(("." . ,--backup-directory)))
(setq make-backup-files t               ; backup of a file the first time it is saved.
      backup-by-copying t               ; don't clobber symlinks
      version-control t                 ; version numbers for backup files
      delete-old-versions t             ; delete excess backup files silently
      delete-by-moving-to-trash t
      kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
      kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
      auto-save-default t               ; auto-save every buffer that visits a file
      auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
      auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
      auto-save-visited-file-name t
      )

#+END_SRC

** Force UTF-8 Everywhere

#+BEGIN_SRC emacs-lisp
(setq utf-translate-cjk-mode nil) ; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
  (set-language-environment 'utf-8)
  (setq locale-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (unless (eq system-type 'windows-nt)
  (set-selection-coding-system 'utf-8))
  (prefer-coding-system 'utf-8)
#+END_SRC

** It's important to set boundarys. 

#+begin_src emacs-lisp
(setq warning-minimum-level :warning)
#+end_src

** Winner Mode
This is a built in mode that allows you to undo/redo window
configurations. Useful for when help/compile windows pop up and you
don't want to deal with them. To use you enable the mode and bind winner-undo and winner-redo to something fun.
#+BEGIN_SRC emacs-lisp
(winner-mode)
#+END_SRC

** Let's start with a clean slate

#+begin_src emacs-lisp
(menu-bar-mode -1)  
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-startup-screen t)
(setq global-visual-line-mode t)
(setq blink-cursor-mode nil)
#+end_src

** Update Last Modified Date
   #+begin_src emacs-lisp
  ;; Update files with last modifed date, when #+lastmod: is available
  (setq time-stamp-active t
        time-stamp-start "#\\+lastmod:[ \t]*"
        time-stamp-end "$"
        time-stamp-format "%04Y-%02m-%02d")
  (add-hook 'before-save-hook 'time-stamp nil)
   #+end_src
   
* Enlightenments
** Olivetti Mode
This mode makes looking at non-code buffers a lot nicer.
#+begin_src emacs-lisp
(use-package olivetti
  :straight t
  )
#+end_src
** Denote
#+begin_src emacs-lisp
(use-package denote
  :straight t
  :ensure t
  :config
  (setq denote-directory (expand-file-name "~/Snyc/notes/"))
  )

#+end_src
** VTERM

#+BEGIN_SRC emacs-lisp
(straight-use-package 'vterm)

#+END_SRC

** Hydra

#+BEGIN_SRC emacs-lisp
(use-package hydra
:straight t
:ensure t)
#+END_SRC
** Doom-modeline

#+BEGIN_SRC emacs-lisp
(doom-modeline-mode)
#+END_SRC

** Tab Out
#+BEGIN_SRC emacs-lisp
(straight-use-package 'tab-jump-out)
(add-hook 'prog-mode-hook 'tab-jump-out-mode)
#+END_SRC
** Which Key

#+BEGIN_SRC emacs-lisp

    (use-package which-key
      :straight t
       :config
       (which-key-mode))
#+END_SRC

** Electric Pairs

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'electric-pair-mode)
#+END_SRC
** Relative line numbers
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)

;; Just Programming Modes
(add-hook 'prog-mode-hook 'display-line-numbers-mode)

;;Global
;;(global-display-line-numbers-mode)	
#+END_SRC
** ace-window
#+begin_src emacs-lisp
  (use-package ace-window
  :straight t
  :init
     (global-set-key (kbd "M-o") 'ace-window)
     (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  )


#+end_src

** Evil Mode

Disabled
!#+BEGIN_SRC emacs-lisp


  (use-package evil
    :straight t
    :config
  (setq evil-move-beyond-eol t)
)
  (use-package evil-leader
  :straight t
  :config
  (evil-leader/set-leader "<SPC>")
  ;;(global-evil-leader-mode)
  ;;(evil-mode 1)

  )
q(define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
(define-key evil-insert-state-map (kbd "C-n") 'evil-next-line)
(define-key evil-insert-state-map (kbd "C-p") 'evil-previous-line)
(define-key evil-insert-state-map (kbd "C-f") 'evil-forward-char)
(define-key evil-insert-state-map (kbd "C-b") 'evil-backward-char)
(define-key evil-insert-state-map (kbd "M-f") 'evil-forward-WORD-begin)
(define-key evil-insert-state-map (kbd "M-b") 'evil-backward-WORD-begin)
(evil-leader/set-key
  "g" 'consult-line
  "b" 'consult-buffer
  "a" 'aqr-avy-map
  "o" 'ace-window
  "f" 'find-file
  "t" 'hydra-tab-bar/body
  "e" 'eval-last-sexp 
  "k" 'aqr-kill-map
  "p" 'projectile-mode-map
  "s" 'save-buffer
  "S" 'save-some-buffers
  "i" 'consult-imenu
  "]" 'winner-redo
  "[" 'winner-undo
  "x" 'aqr-x-prefix
)

#+END_SRC

** DONE Org Mode



*** TODO This should be moved to a writing mode, and the org one re-written
#+begin_src emacs-lisp

(defun my-minor-modes ()
	"Enables my minor modes"
	(interactive)
	(flyspell-mode t)
	(org-bullets-mode t)
	(company-mode t)
	(visual-line-mode t)
	(olivetti-mode t)
	(setq scroll-margin 30)
	)
;;(add-hook 'org-mode-hook 'my-minor-modes)

(use-package org-wc
  :straight t)
  
(setq org-agenda-files '("~/Sync/org/agenda")) 
(setq org-directory "~/Sync/org/")
  (setq org-html-checkbox-type 'html)
  (use-package org-bullets
    :straight t
    :diminish org-bullets-mode)

 ;; (setq org-src-tab-acts-natively t)
(setq org-edit-src-content-indentation 0)
  ;; Key binds

  (define-key org-mode-map (kbd "M-[") `org-backward-paragraph)
  (define-key org-mode-map (kbd "M-]") `org-forward-paragraph)
  (define-key org-mode-map (kbd "M-,") `org-previous-visible-heading)
  (define-key org-mode-map (kbd "M-.") `org-next-visible-heading)
  (define-key org-mode-map (kbd "C-c s") `org-insert-subheading)
  (global-set-key (kbd "C-c a") 'org-agenda)
#+end_src

#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "<f5>") 'org-capture)
(setq org-default-notes-file (concat org-directory "notes.org"))
(require 'org-capture)  ; Make sure org-capture is loaded

;; If org-capture-templates hasn't been defined yet, initialize it as an empty list.
 (boundp 'org-capture-templates)
  (setq org-capture-templates '())
 
(add-to-list 'org-capture-templates
             '("p" "Programming Notes"))

(add-to-list 'org-capture-templates
             '("pg" "Golang Note" entry
               (file+headline "~/Sync/org/code-notes.org" "Golang")
               "* %^{Description}\n%?\n#+BEGIN_SRC golang\n%i\n#+END_SRC\nEntered on %U\n"))

(add-to-list 'org-capture-templates
             '("ph" "HTML Note" entry
               (file+headline "~/Sync/org/code-notes.org" "HTML")
               "* %^{Description}\n%?\n#+BEGIN_SRC html\n%i\n#+END_SRC\nEntered on %U\n"))

(add-to-list 'org-capture-templates
             '("ps" "SQL Note" entry
               (file+headline "~/Sync/org/code-notes.org" "SQL")
               "* %^{Description}\n%?\n#+BEGIN_SRC sql\n%i\n#+END_SRC\nEntered on %U\n"))

(add-to-list 'org-capture-templates
             '("pb" "Bash Note" entry
               (file+headline "~/Sync/org/code-notes.org" "Bash")
               "* %^{Description}\n%?\n#+BEGIN_SRC bash\n%i\n#+END_SRC\nEntered on %U\n"))

(add-to-list 'org-capture-templates
      '("t" "Thought" entry (file+headline org-default-notes-file "Random Thoughts")
         "* %?\nEntered on %U\n"))

(add-to-list 'org-capture-templates
	     '("q" "Quote" entry
	       (file+headline "~/Sync/org/quotes.org" "Quotes")
               "* %?\nEntered on %U\n"))

(add-to-list 'org-capture-templates
	   	'("g" "Project Todo" entry
         (file+headline "%(concat (projectile-project-root) \"readme.org\")" "Todo")
         "* %?\nEntered on %U\n %i\n %a"))

(add-to-list 'org-capture-templates
             '("w" "Writing"))

(add-to-list 'org-capture-templates
	     '("wc" "Character" entry
	       (file+headline (lambda () (org-capture-get :original-file)) "Characters")
         "* %^{Name}\n"))

(add-to-list 'org-capture-templates
	     '("wp" "Place" entry
	       (file+headline (lambda () (org-capture-get :original-file)) "Places")
         "* %^{Location Name}\n"))


#+END_SRC


** Tab Bar Mode
#+begin_src emacs-lisp
(tab-bar-mode 1)
#+end_src
** Yasnippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :straight t
    )
(eval-after-load 'yasnippet
  '(yas-global-mode))

  (setq yas-snippet-dirs
	'("~/.emacs.d/snippets"
	  ))
#+end_src
** Theme preferences
#+begin_src emacs-lisp
  ;;(load-theme 'misterioso t)
  (use-package doom-themes
  :straight t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;;(load-theme 'doom-snazzy t)
  (load-theme 'doom-ephemeral t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))
#+end_src

#+RESULTS:
: t

** Programing



#+begin_src emacs-lisp


;; (use-package format-all
;;   :straight t
;;   )
;; (add-hook 'prog-mode-hook 'format-all-mode)

(use-package prettier-js
  :straight t
  :init
  (add-hook 'js-mode-hook  'prettier-js-mode)
)

(use-package flycheck
    :straight t
    :hook ((flycheck-mode . flymake-mode-off))
    :init (global-flycheck-mode))


    (use-package lsp-mode
     :straight t
     :init
     ;; set prefix for lsp-command-kepmap
     (setq lsp-keymap-prefix "C-c l")
     :hook (
	     (csharp-mode . lsp)
	     (python-mode . lsp)
	     (typescript-mode . lsp)
	     (javascript-mode . lsp)
	     (js-mode . lsp)
	     (css-mode . lsp)
	     (go-mode . lsp)
	     (lsp-mode . lsp-enable-which-key-integration))
     :commands lsp)


    (use-package lsp-ui
      :straight t
      :commands (lsp-ui-mode)
     :custom
      Sideline
      (lsp-ui-sideline-show-diagnostics t)
      (lsp-ui-sideline-show-hover nil)
      (lsp-ui-sideline-show-code-actions nil)
      (lsp-ui-sideline-update-mode 'line)
      (lsp-ui-sideline-delay 0)
      ;; Peek
      (lsp-ui-peek-enable t)
      (lsp-ui-peek-show-directory nil)
      ;; Documentation
      (lsp-ui-doc-enable t)
      (lsp-ui-doc-position 'at-point)
      (lsp-ui-doc-delay 0.2)
      ;; IMenu
      (lsp-ui-imenu-window-width 0)
      (lsp-ui-imenu--custom-mode-line-format nil)
      :hook (lsp-mode . lsp-ui-mode))

;; (require 'lsp-quicklintjs)
#+end_src

*** Python


#+BEGIN_SRC emacs-lisp
(use-package python-mode
  :hook
  (python-mode . pyvenv-mode)
  (python-mode . flycheck-mode)
  ;;(python-mode . blacken-mode)
  :custom
  ;; NOTE: Set these if Python 3 is called "python3" on your system!
  (python-shell-interpreter "python3")
  :config
  )

#+END_SRC
*** Python Pyright - LSP Server
#+begin_src emacs-lisp
(use-package lsp-pyright
  :straight t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))  ; or lsp-deferred
#+end_src			  
*** Python venv - Virtual Environments
#+BEGIN_SRC emacs-lisp
(use-package pyvenv
  :straight t
  :init
 ;; (setenv "WORKON_HOME" "~/.venv/")
  :config
  ;; (pyvenv-mode t)

  ;; Set correct Python interpreter
  (setq pyvenv-post-activate-hooks
        (list (lambda ()
                (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python")))))
  (setq pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "python3")))))

#+END_SRC
*** Web-Mode

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :straight t)
   (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.razor?\\'" . web-mode))
;;   (add-to-list 'auto-mode-alist '("\\.tmpl?\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.cshtml?\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.svelte?\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.j2?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
 (setq web-mode-engines-alist
       '(("razor"    . "\\.cshtml\\'")
	 ("blade"  . "\\.blade\\.")
	 ("svelte" . "\\.svelte\\.")
	 ("django" . "\\.j2\\.")
;;	 ("go"     . "\\.tmpl\\.")
 ))
 (add-hook 'web-mode-hook
            (lambda ()
              (when (string-equal "tsx" (file-name-extension buffer-file-name))
                (setup-tide-mode))))
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :straight t
  :ensure t)

#+END_SRC
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
  :straight t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))

(projectile-register-project-type 'go '("go.mod")
				  :project-file "go.mod"
				  :compile "go build"
				  :test "go test"
				  :run "go run"
				  :test-suffix "_test")
#+end_src

** Dashboard (startup screen)
  #+begin_src emacs-lisp
	    (use-package dashboard
		:straight t
		:diminish dashboard-mode
		:config
		(setq dashboard-banner-logo-title "Nihil sine labore")
		(setq dashboard-startup-banner "~/.emacs.d/logo.png.fix")
		(setq dashboard-items '((recents  . 5)
					(bookmarks . 5)
					(projects . 5)
					(agenda . 5)
					(registers . 5)))
		(dashboard-setup-startup-hook))
  #+end_src

** Recent Files

  #+begin_src emacs-lisp
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)
;;(global-set-key "\C-x\ \C-r" 'recentf-open-files)
  #+end_src
** Free Key
Invoke to see which keys are free in current buffer.

#+BEGIN_SRC emacs-lisp
(straight-use-package 'free-keys)
#+END_SRC

** Complete Anything

#+begin_src emacs-lisp
(use-package company
:straight t
:config
(company-mode))
(setq company-minimum-prefix-length 2 )
(setq company-idle-delay 0 )
(setq company-show-quick-access 'left)
#+end_src
** Custom Functions

#+BEGIN_SRC emacs-lisp
  (defun aqr-search-from-begining ()
  "Go to the begining of the file and search from there"
  (interactive)
  (goto-char (point-min))
  (isearch-forward)
  )

#+END_SRC

** Keybindings

#+begin_src emacs-lisp


  (progn
    ;; Map for killing things
    (define-prefix-command 'aqr-kill-map)
    (define-key aqr-kill-map (kbd "k") 'kill-whole-line)
    (define-key aqr-kill-map (kbd "l") 'kill-line)
    (define-key aqr-kill-map (kbd "m") 'avy-kill-region)
    (global-set-key (kbd "C-k") 'aqr-kill-map))

(defhydra hydra-tab-bar (:color blue :hint nil)
  "
^Tabs^
----------------------------------
[_n_] Next Tab       [_c_] Close Tab
[_p_] Previous Tab   [_N_] New Tab
[_l_] List Tabs      [_r_] Rename Tab
[_g_] Goto Tab       [_s_] Switch to Tab by Name
"
  ("n" tab-bar-switch-to-next-tab)
  ("p" tab-bar-switch-to-prev-tab)
  ("l" tab-bar-select-tab-by-name)
  ("g" tab-bar-select-tab)
  ("c" tab-bar-close-tab)
  ("N" tab-bar-new-tab)
  ("r" tab-bar-rename-tab)
  ("s" switch-to-buffer)  ; This is just an example of switching to a tab (buffer) by name.
  ("q" nil "quit" :color blue))

(global-set-key (kbd "C-c t") 'hydra-tab-bar/body)

(define-prefix-command 'aqr-avy-map)
(define-key aqr-avy-map (kbd "c r") 'avy-copy-region)
(define-key aqr-avy-map (kbd "c l") 'avy-copy-line)
(define-key aqr-avy-map (kbd "m r") 'avy-move-region)
(define-key aqr-avy-map (kbd "m l") 'avy-move-line)
(define-key aqr-avy-map (kbd "k l") 'avy-kill-line)
(define-key aqr-avy-map (kbd "k r") 'avy-kill-region)
(define-key aqr-avy-map (kbd "g l") 'avy-goto-line)
(define-key aqr-avy-map (kbd "g c") 'avy-goto-char-timer)
(define-key aqr-avy-map (kbd "g e") 'avy-goto-end-of-line)
(define-key aqr-avy-map (kbd "g e") 'avy-goto-end-of-line)
(define-key aqr-avy-map (kbd "g z") 'avy-goto-char-in-line)



  (define-prefix-command 'aqr-map)
  (global-set-key (kbd "`") 'aqr-map)
  (define-key aqr-map (kbd "s") 'aqr-search-from-begining)
  (define-key aqr-map (kbd "f") 'projectile-find-file)
  (define-key aqr-map (kbd "p") 'projectile-switch-project)
  (define-key aqr-map (kbd "a") 'avy-goto-char-timer)
  (define-key aqr-map (kbd "`") (lambda () (interactive) (insert "`")))
  (define-key aqr-map (kbd "r c") 'avy-copy-region)
  (define-key aqr-map (kbd "r k") 'avy-kill-region)
  (define-key aqr-map (kbd "l") 'avy-goto-line)
  ;;(define-key aqr-map (kbd "b") 'consult-buffer)
  ;;(define-key aqr-map (kbd "i") 'consult-imenu)
;;(define-key aqr-map (kbd "k") 'kill-whole-line)
;; Use C-o for open new line below and C-O for above
(global-set-key (kbd "C-o") (kbd "C-e RET"))
(global-set-key (kbd "C-S-o") (kbd "C-a RET C-p"))
(global-set-key (kbd "<f7>") 'tab-bar-switch-to-prev-tab)
(global-set-key (kbd "<f8>") 'tab-bar-switch-to-next-tab)
(global-set-key (kbd "M-[") `backward-paragraph)
(global-set-key (kbd "M-]") `forward-paragraph)
(use-package expand-region
  :straight t
  :bind
  ("C-=" . er/expand-region)
  ("C--" . er/contract-region))
  (global-set-key (kbd "C-+") (lambda () (interactive) (message "Use C-= you idiot")))

#+end_src

#+RESULTS:
: er/contract-region

** key-chord
  :LOGBOOK:
  CLOCK: [2022-05-17 Tue 07:28]
  :END:
Allows quick two letter 'chords' as shortcuts.

#+BEGIN_SRC emacs-lisp
(use-package key-chord
:straight t
:init
   (key-chord-mode 1)
)


(key-chord-define-global "df" 'aqr-map)
(key-chord-define-global "qw" 'ace-window )
(key-chord-define-global "cx" 'isearch-forward)
(key-chord-define-global "fj" 'avy-goto-char-timer)
#+END_SRC

#+RESULTS:
: isearch-forward

q


Two letter combinations left

bq bz cf cj cv cx fq fv fx fz gq gv gx hx hz jb jd jf jg jh jl jm jp jq jr js jt jv jw jx jy jz kq kx kz mx mz pq pv px qb qc qd qf qg qh qj qk ql qm qn qp qv qx qy qz sx tq vb vf vh vj vk vm vp vq vw vx wq wv wx xd xj xk xr xz yq yy zf zr zx

** Ansi Color for Compilation Mode

#+BEGIN_SRC emacs-lisp
(use-package ansi-color
    :hook (compilation-filter . ansi-color-compilation-filter)) 
#+END_SRC

#+RESULTS:
| colorize-compilation-buffer |

** Dired

#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+END_SRC
** Templ Mode

#+BEGIN_SRC emacs-lisp
(define-derived-mode templ-mode go-mode "templ-mode"
  "Major mode for editing Templ files."
(add-to-alist 'auto-mode-alist  '("\\.templ\\'" . templ-mode))
(defun templ-generate ()
  "Run templ generate on the current file."
  (shell-command "templ generate"))
(add-hook 'after-save-hook 'templ-generate nil t))

#+END_SRC

We also are going to use eglot for this to check it out.

#+BEGIN_SRC emacs-lisp
(use-package eglot
:straight t
:config
(add-to-list 'eglot-server-programs '((templ-mode) "templ" "lsp"))
(add-hook 'templ-mode-hook 'eglot-ensure)
)

#+END_SRC
** Centered Mini Buffer
Disabled for now. 
!#+BEGIN_SRC emacs-lisp
(use-package mini-frame
  :straight t
  :config
  (mini-frame-mode 1))

(setq mini-frame-color-shift-step 0)

(setq mini-frame-show-parameters
      '((top . 0.3)
        (left . 0.5)
        (width . 0.65)
        ;; (height . 10)
        (minibuffer . only)))

#+END_SRC

* Tree Sitter
Disabled. Either I'm too dumb to use it or it doesn't actually do anything.
!#+BEGIN_SRC emacs-lisp
(straight-use-package 'tree-sitter)
(straight-use-package 'tree-sitter-langs)
(use-package templ-ts-mode
      :straight t
      )


!#+END_SRC

* Custom Behaviors
#+BEGIN_SRC emacs-lisp

(defun aqr-x-prefix ()
  (interactive)
  (let ((map (make-sparse-keymap)))
    (set-keymap-parent map ctl-x-map)
    (set-transient-map map)))


(defun newline-above-and-below ()
  "Inserts a newline above and below the current line."
  (interactive)
  (beginning-of-line)     ; Move to the start of the current line
  (newline)               ; Insert a newline above
  (forward-line -1)       ; Move to the original line
  (end-of-line)           ; Move to the end of the current (original) line
  (newline))

(global-set-key (kbd "C-c n") 'newline-above-and-below)

;; Turning this off because misc has a similar function
;; (defun duplicate-line ()
;;   "Duplicate the current line."
;;   (interactive)
;;   (let ((content (thing-at-point 'line)))
;;     (end-of-line)
;;     (newline)
;;     (insert content)
;;     (forward-line -1)))

(global-set-key (kbd "C-c j") 'duplicate-line)


#+END_SRC

* Latex
#+BEGIN_SRC emacs-lisp
(use-package auctex
  :straight t
  :ensure t)

(use-package company-auctex
  :straight t
  :ensure t)

#+END_SRC

* Literate Programming

** Custom Functions

*** Execute code blocks in v-term.
This will check to see that you are in a org mode source block and then run the contents in vterm, using an existing one or opening a new one.

#+begin_src elisp
;; ChatGPT wrote this for me after a lot of back and forth.
(defun run-command-in-vterm (command)
  "Run COMMAND in the current vterm buffer if it exists, otherwise create a new vterm buffer."
  (interactive "sCommand to run in vterm: ")
  (require 'vterm)
  (let ((vterm-buffer (or (get-buffer "*vterm*")
                          (vterm))))
    (with-current-buffer vterm-buffer
      (vterm-send-string command)
      (vterm-send-return)
      (pop-to-buffer vterm-buffer))))

(defun run-org-block-in-vterm ()
  "Run the content of the current org source block in a new or existing vterm buffer."
  (interactive)
  (unless (eq major-mode 'org-mode)
    (error "Not in org-mode"))
  (let ((element (org-element-at-point)))
    (when (eq (org-element-type element) 'src-block)
      (let ((content (org-element-property :value element)))
        (run-command-in-vterm content)))))

#+end_src

